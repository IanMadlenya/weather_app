apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

// Load keystore
//def keystorePropertiesFile = rootProject.file("keystore.properties");
//def keystoreProperties = new Properties()
//keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
//    signingConfigs {
//        config {
//            storeFile file(keystoreProperties['storeFile'])
//            storePassword keystoreProperties['storePassword']
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//        }
//    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.mirhoseini.weatherapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    appName: "@string/app_name",
            ]
//            signingConfig signingConfigs.config
        }

        debug {
            manifestPlaceholders = [
                    appName: "@string/app_name_debug",
            ]
            applicationIdSuffix '.debug'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    // fixes espresso conflict with supportAnnotation new version
    configurations.all {
        resolutionStrategy {
            force rootProject.ext.testLibraries.supportAnnotations
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':core-lib')

    testCompile rootProject.ext.testLibraries.junit
    testCompile rootProject.ext.testLibraries.robolectric

    androidTestCompile rootProject.ext.testLibraries.espresso

    compile rootProject.ext.libraries.appCompat
    compile rootProject.ext.libraries.androidSupport
    compile rootProject.ext.libraries.vectorSupport
    compile rootProject.ext.libraries.recyclerView
    compile rootProject.ext.libraries.cardView
    compile rootProject.ext.libraries.designSupport

    compile rootProject.ext.libraries.rxandroid

    compile rootProject.ext.libraries.appSettings
    compile rootProject.ext.libraries.utils

    compile rootProject.ext.libraries.butterknife
    apt rootProject.ext.aptLibraries.butterknifeCompiler

    compile rootProject.ext.libraries.dagger
    apt rootProject.ext.aptLibraries.daggerCompiler

    compile rootProject.ext.libraries.timber

    compile(rootProject.ext.libraries.crashlytics) {
        transitive = true;
    }

    compile(rootProject.ext.libraries.answers) {
        transitive = true;
    }

}

apply plugin: BumpReadMePlugin

class BumpReadMePlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        project.task('bumpReadMe', type: BumpReadMe) {
            readMe = new File(project.rootDir.absolutePath + "/README.md")
            versionName = project.android.defaultConfig.versionName
        }
    }

}

class BumpReadMe extends DefaultTask {
    def readMe
    def versionName

    File getReadMe() {
        project.file(readMe)
    }

    BumpReadMe() {
        group = 'plugin basics'

    }

    @TaskAction
    def bumpVersion() {
        description = 'Update the ReadMe file to App latest version'

        File readMe = getReadMe()
        String contents = readMe.getText('UTF-8')
        contents = contents.replaceAll("Version:.*", " Version:  $versionName")
        readMe.write(contents, 'UTF-8')
    }

    @TaskAction
    def bumpLastUpdate() {
        description = 'Update the ReadMe file Last Update'

        File readMe = getReadMe()
        String contents = readMe.getText('UTF-8')
        contents = contents.replaceAll("Last Update:.*", "Last Update: ${getDate()}")
        readMe.write(contents, 'UTF-8')
    }

    def getDate() {
        def date = new Date()
        def formattedDate = date.format('EEE MMM dd, yyyy')//Sun May 1, 2016
        return formattedDate
    }

}